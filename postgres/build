#!/bin/bash
# PostgreSQL container build preparation script
# Generates .env file dynamically based on extensions requested
# Usage: 
#   POSTGRES_EXTENSIONS="citus,vector" ./make build postgres  (direct extensions)
#   POSTGRES_PROFILE="ai-ml" ./make build postgres            (profile-based)

set -euo pipefail

# Source shared logging utilities
source "$(dirname "$0")/../helpers/logging.sh"

# Default extensions if not specified
DEFAULT_EXTENSIONS="pg_stat_statements,hypopg,pg_qualstats"

# Determine extensions source: profile vs direct specification
if [[ -n "${POSTGRES_PROFILE:-}" ]]; then
    log_info "Using profile: $POSTGRES_PROFILE"
    
    # Parse extensions from profile
    if ! PROFILE_EXTENSIONS=$(./scripts/parse-profile.sh "$POSTGRES_PROFILE"); then
        log_error "Failed to parse profile '$POSTGRES_PROFILE'"
        exit 1
    fi
    
    log_info "Profile extensions: $PROFILE_EXTENSIONS"
    # Add default extensions to profile extensions
    ALL_EXTENSIONS="${PROFILE_EXTENSIONS},${DEFAULT_EXTENSIONS}"
    
    # Export profile name for version.sh to use in tagging
    export POSTGRES_PROFILE
    
elif [[ -n "${POSTGRES_EXTENSIONS:-}" ]]; then
    log_info "Extensions requested: $POSTGRES_EXTENSIONS"
    # Add default extensions to user-specified ones
    ALL_EXTENSIONS="${POSTGRES_EXTENSIONS},${DEFAULT_EXTENSIONS}"
else
    log_info "No extensions or profile specified, using defaults only"
    ALL_EXTENSIONS="$DEFAULT_EXTENSIONS"
fi

# Remove duplicates
ALL_EXTENSIONS=$(echo "$ALL_EXTENSIONS" | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')

log_info "Final extensions list: $ALL_EXTENSIONS"

# Export for version.sh to use
export POSTGRES_EXTENSIONS="$ALL_EXTENSIONS"

# Get all build variables from version.sh
log_info "Getting version information and build arguments..."
BUILD_VARS=$(./version.sh --build-args)

if [[ $? -ne 0 || -z "$BUILD_VARS" ]]; then
    log_error "Failed to get build arguments from version.sh"
    exit 1
fi

# Create .env file from build variables
log_info "Generating .env file for docker compose..."
{
    echo "# Auto-generated by build script - DO NOT EDIT MANUALLY"
    echo "# Generated at: $(date)"
    echo "# Usage: docker compose build (called by make script)"
    echo ""
    echo "# Build Configuration"
    echo ""
    echo "# PostgreSQL Version"
    eval "$BUILD_VARS"
    echo "POSTGRES_VERSION=${VERSION}"
    echo "PG_BASE_VERSION=${PG_BASE_VERSION}"
    echo "POSTGRES_MAJOR_VERSION=${MAJOR_VERSION}"
    echo ""
    echo "# Extension Versions"
    echo "PGVECTOR_VERSION=${PGVECTOR_VERSION}"
    echo "PGNET_VERSION=${PGNET_VERSION}"
    echo "PGPARTMAN_VERSION=${PGPARTMAN_VERSION}"
    echo "PARADEDB_VERSION=${PARADEDB_VERSION}"
    echo "PGJWT_VERSION=${PGJWT_VERSION}"
    echo ""
    echo "# Extensions Configuration"
    echo "POSTGRES_EXTENSIONS=${ALL_EXTENSIONS}"
    echo "SHARED_PRELOAD_LIBRARIES=${SHARED_PRELOAD_LIBRARIES}"
    echo ""
    echo "# Database Configuration (defaults)"
    echo "POSTGRES_DB=myapp"
    echo "POSTGRES_USER=postgres"
    echo "POSTGRES_PASSWORD=changeme"
    echo ""
    echo "# Port Configuration"
    echo "POSTGRES_PORT=5432"
} > .env

log_success ".env file generated successfully"

# Show what will be built (when make calls docker compose)
log_info "Configuration ready for build:"
log_info "  PostgreSQL: ${VERSION}"
if [[ -n "${POSTGRES_PROFILE:-}" ]]; then
    log_info "  Profile: ${POSTGRES_PROFILE}"
fi
log_info "  Extensions: ${ALL_EXTENSIONS}"
log_info "  Shared preload: ${SHARED_PRELOAD_LIBRARIES}"
log_info "  Namespace: oorabona/"
log_info ""
log_info "The 'make' script will now proceed with docker compose build..."