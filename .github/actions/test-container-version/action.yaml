name: 'Test Container Version'
description: 'Tests a container version using the existing make script infrastructure'

inputs:
  container:
    description: 'Container name to test'
    required: true
  version:
    description: 'Version to test (optional, uses current if not specified)'
    required: false
    default: ''

outputs:
  version_works:
    description: 'Whether the version works correctly'
    value: ${{ steps.test.outputs.version_works }}
  current_version:
    description: 'Current version detected'
    value: ${{ steps.test.outputs.current_version }}
  test_output:
    description: 'Output from the version test'
    value: ${{ steps.test.outputs.test_output }}

runs:
  using: 'composite'
  steps:
    - name: Test container version
      id: test
      shell: bash
      run: |
        set -e
        
        container="${{ inputs.container }}"
        test_version="${{ inputs.version }}"
        
        echo "🧪 Testing version for $container..."
        
        # Check if container directory exists
        if [[ ! -d "$container" ]]; then
          echo "❌ Container directory $container does not exist"
          echo "version_works=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Check if version.sh exists
        if [[ ! -f "$container/version.sh" ]]; then
          echo "❌ No version.sh file found in $container"
          echo "version_works=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Make make script and version.sh executable
        chmod +x make 2>/dev/null || true
        chmod +x "$container/version.sh"
        
        cd "$container"
        
        # Get current version if no test version specified
        if [[ -z "$test_version" ]]; then
          test_version=$(bash version.sh 2>/dev/null | head -1 || echo "")
          if [[ -z "$test_version" ]]; then
            # Try to get from docker-compose.yml defaults
            test_version=$(grep -E "VERSION.*:-" docker-compose.yml 2>/dev/null | head -1 | sed -n 's/.*:-\([^}]*\).*/\1/p' | tr -d ' ' || echo "latest")
          fi
        fi
        
        echo "current_version=$test_version" >> $GITHUB_OUTPUT
        echo "📋 Testing version: $test_version"
        
        # Test the version using the version.sh script
        test_output=""
        version_works="false"
        
        # Test 1: Can we get the version?
        if [[ "$test_version" == "latest" ]]; then
          # Test getting latest version
          if latest_version=$(bash version.sh latest 2>&1); then
            test_output="✅ Successfully retrieved latest version: $latest_version"
            version_works="true"
          else
            test_output="❌ Failed to retrieve latest version: $latest_version"
          fi
        else
          # Test specific version
          if version_result=$(bash version.sh "$test_version" 2>&1); then
            if [[ -n "$version_result" ]]; then
              test_output="✅ Version $test_version is valid: $version_result"
              version_works="true"
            else
              test_output="❌ Version $test_version returned empty result"
            fi
          else
            test_output="❌ Version $test_version failed: $version_result"
          fi
        fi
        
        echo "version_works=$version_works" >> $GITHUB_OUTPUT
        echo "test_output<<EOF" >> $GITHUB_OUTPUT
        echo "$test_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "$test_output"
        cd ..
