name: Build Container
description: Smart container build with multi-platform and multi-registry support
inputs:
  container:
    description: Container name to build
    required: true
  force_rebuild:
    description: Force rebuild even if image exists
    required: false
    default: 'false'
  dockerhub_username:
    description: Docker Hub username
    required: false
  dockerhub_token:
    description: Docker Hub token
    required: false
  github_token:
    description: GitHub token for GHCR
    required: true
outputs:
  built:
    description: Whether the container was built
    value: ${{ steps.check-build.outputs.needs_build }}
  version:
    description: Container version that was built
    value: ${{ steps.check-build.outputs.current_version }}
  image_name:
    description: Full image name
    value: ${{ steps.check-build.outputs.image_name }}
runs:
  using: composite
  steps:
    - name: Set up QEMU for multi-architecture builds
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        driver: docker-container
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}
    - name: Log in to Docker Hub
      if: ${{ inputs.dockerhub_username != '' && inputs.dockerhub_token != '' }}
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_token }}
    - name: Check if build is needed and get version
      id: check-build
      shell: bash
      run: |
        set -e
        container="${{ inputs.container }}"
        
        # Check if the container directory exists and has a Dockerfile
        if [[ ! -f "$container/Dockerfile" ]]; then
          echo "‚ùå No Dockerfile found for $container"
          echo "needs_build=false" >> $GITHUB_OUTPUT
          echo "current_version=latest" >> $GITHUB_OUTPUT
          echo "image_name=${{ github.repository_owner }}/${container}" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Set image names
        github_username="${{ github.repository_owner }}"
        image_name="${github_username}/${container}"
        
        # Get current version for tagging (simple, no registry checks needed)
        current_version=""
        if current_version=$(./make version "$container" 2>/dev/null); then
          if [[ -n "$current_version" && "$current_version" != "unknown" ]]; then
            echo "üìã Building version: $current_version"
          else
            current_version="latest"
            echo "üìã Building version: $current_version (fallback)"
          fi
        else
          current_version="latest"
          echo "üìã Building version: $current_version (fallback)"
        fi

        # Determine if build is needed
        if [ "${{ inputs.force_rebuild }}" = "true" ]; then
          echo "üîÑ Force rebuild requested - build authorized by upstream monitor"
          needs_build=true
        elif [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "üìù Code changes detected - build needed"
          needs_build=true  
        else
          echo "üîÑ Manual/scheduled build"
          needs_build=true
        fi
        
        echo "needs_build=$needs_build" >> $GITHUB_OUTPUT
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        echo "image_name=$image_name" >> $GITHUB_OUTPUT

    - name: Build and push using make script
      if: ${{ steps.check-build.outputs.needs_build == 'true' }}
      shell: bash
      env:
        EVENT_NAME: ${{ github.event_name }}
      run: |
        set -e
        container="${{ inputs.container }}"
        current_version="${{ steps.check-build.outputs.current_version }}"
        
        echo "üî® Building $container:$current_version using make script..."
        
        # Make the script executable
        chmod +x make
        
        # The make script handles all the complexity of building and pushing
        if ./make build "$container" "$current_version"; then
          echo "‚úÖ Build successful"
          
          # Push to registries using make script
          # Skip push on pull_request events (test build only)
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            echo "‚è≠Ô∏è Skipping push (pull request - test build only)"
          else
            if ./make push "$container" "$current_version"; then
              echo "‚úÖ Push successful"
            else
              echo "‚ö†Ô∏è Push failed, but build succeeded"
              exit 1
            fi
          fi
        else
          echo "‚ùå Build failed"
          exit 1
        fi
    # Note: Trivy scanning temporarily disabled due to image reference issues
    # with multi-platform builds and docker-compose image naming
    # TODO: Re-enable after fixing image tagging consistency
    # - name: Run Trivy vulnerability scanner
    #   if: steps.check-build.outputs.needs_build == 'true'
    #   uses: aquasecurity/trivy-action@0.32.0
    #   with:
    #     image-ref: local-scan/${{ inputs.container }}:${{ steps.check-build.outputs.current_version }}
    #     format: sarif
    #     output: trivy-results.sarif
    #   continue-on-error: true
    # Note: SARIF upload temporarily disabled along with Trivy scanning
    # - name: Upload Trivy scan results
    #   if: steps.check-build.outputs.needs_build == 'true'
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: trivy-results.sarif
    #   continue-on-error: true
