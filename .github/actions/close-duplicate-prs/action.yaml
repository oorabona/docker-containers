name: Close Duplicate PRs
description: Closes existing PRs for the same container version update to prevent
  duplicates
inputs:
  container:
    description: Container name
    required: true
  new_version:
    description: New version being updated to
    required: true
  github_token:
    description: GitHub token for API access
    required: true
outputs:
  existing_pr_found:
    description: Whether an existing PR was found for this container/version combination
    value: ${{ steps.check_duplicates.outputs.existing_pr_found }}
runs:
  using: composite
  steps:
    - name: Setup jq
      uses: vegardit/gha-setup-jq@v1
      with:
        version: latest
    - name: Setup GitHub CLI
      id: setup_gh
      uses: ./.github/actions/setup-github-cli
      with:
        github_token: ${{ inputs.github_token }}
    - name: Close duplicate PRs
      id: check_duplicates
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
        CONTAINER: ${{ inputs.container }}
        NEW_VERSION: ${{ inputs.new_version }}
      run: |-
        set -e
        echo "üîç Checking for existing PRs for container: $CONTAINER"

        # Check if GitHub CLI is available from setup step
        if [ "${{ steps.setup_gh.outputs.available }}" != "true" ]; then
          echo "‚ö†Ô∏è  GitHub CLI not available, skipping PR cleanup"
          echo "‚ÑπÔ∏è  This would work in GitHub Actions environment"
          echo "existing_pr_found=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "‚úÖ GitHub CLI available (version: ${{ steps.setup_gh.outputs.version }})"

        # Define search patterns for PRs that should be closed
        pr_title_patterns=(
          "Update $CONTAINER to version"
          "chore($CONTAINER): update to version"
          "Bump $CONTAINER to"
        )

        # Get all open PRs
        open_prs=$(gh pr list --state open --json number,title,headRefName,body --limit 100)
        if [ "$open_prs" = "[]" ]; then
          echo "‚úÖ No open PRs found"
          exit 0
        fi
        closed_count=0

        # Check each PR title pattern
        for pattern in "${pr_title_patterns[@]}"; do
          echo "üîç Searching for PRs matching pattern: '$pattern'"

          # Find PRs matching this pattern
          matching_prs=$(echo "$open_prs" | jq -r --arg pattern "$pattern" \
            '.[] | select(.title | test($pattern; "i")) | .number')
          for pr_number in $matching_prs; do
            if [ -n "$pr_number" ]; then
              # Get PR details
              pr_info=$(echo "$open_prs" | jq -r --arg num "$pr_number" \
                '.[] | select(.number == ($num | tonumber))')
              pr_title=$(echo "$pr_info" | jq -r '.title')
              pr_branch=$(echo "$pr_info" | jq -r '.headRefName')
              pr_body=$(echo "$pr_info" | jq -r '.body // ""')
              echo "üìã Found potential duplicate PR #$pr_number: '$pr_title'"

              # Check if this is for the same container
              if echo "$pr_title $pr_body $pr_branch" | grep -qi "$CONTAINER"; then
                # Check if it's for a different version or older
                if ! echo "$pr_title $pr_body $pr_branch" | grep -q "$NEW_VERSION"; then
                  echo "üóëÔ∏è  Closing outdated PR #$pr_number (different version)"

                  # Add a comment explaining the closure using heredoc for better readability
                  gh pr comment "$pr_number" --body "$(cat <<EOF
                  üîÑ **Automated Closure**
                  This PR is being automatically closed because a newer version update for \`$CONTAINER\` is available.
                  **Reason:** Superseded by version \`$NEW_VERSION\`
                  A new PR will be created with the latest version update.
                  ---
                  *Closed automatically by the Upstream Version Monitor workflow.*
                  EOF
                  )"

                  # Close the PR
                  gh pr close "$pr_number" --comment "Superseded by newer version update"

                  # Delete the branch if it's an update branch
                  if echo "$pr_branch" | grep -q "^update/"; then
                    echo "üåø Deleting branch: $pr_branch"
                    git push origin --delete "$pr_branch" 2>/dev/null || echo "‚ö†Ô∏è  Branch $pr_branch already deleted or doesn't exist"
                  fi
                  ((closed_count++))
                else
                  echo "‚ö†Ô∏è  PR #$pr_number is for the same version ($NEW_VERSION) - skipping closure"
                fi
              else
                echo "‚ÑπÔ∏è  PR #$pr_number is for a different container - skipping"
              fi
            fi
          done
        done
        if [ "$closed_count" -gt 0 ]; then
          echo "‚úÖ Closed $closed_count duplicate/outdated PRs for $CONTAINER"
        else
          echo "‚úÖ No duplicate PRs found for $CONTAINER"
        fi

        # Also check for any PRs that might be using the exact same branch name
        target_branch="update/${CONTAINER}-${NEW_VERSION}"
        existing_pr=$(gh pr list --head "$target_branch" --state open --json number | jq -r '.[0].number // empty')
        if [ -n "$existing_pr" ]; then
          echo "‚ö†Ô∏è  Found existing PR #$existing_pr using target branch: $target_branch"
          echo "This suggests the same version update already exists - will skip creating new PR"
          echo "existing_pr_found=true" >> $GITHUB_OUTPUT
        else
          echo "existing_pr_found=false" >> $GITHUB_OUTPUT
        fi
