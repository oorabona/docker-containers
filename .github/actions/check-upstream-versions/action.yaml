name: 'Check Upstream Versions'
description: 'Checks if containers have newer upstream versions available and compares against published registry versions'

inputs:
  container:
    description: 'Container name to check (optional, checks all if empty)'
    required: false
    default: ''
  dockerhub_username:
    description: 'Docker Hub username (optional, for registry checks)'
    required: false
    default: ''
  skip_registry_check:
    description: 'Skip checking registry versions'
    required: false
    default: 'false'

outputs:
  containers_with_updates:
    description: 'JSON array of containers with upstream updates available'
    value: ${{ steps.check-versions.outputs.containers_with_updates }}
  update_count:
    description: 'Number of containers with upstream updates'
    value: ${{ steps.check-versions.outputs.update_count }}
  version_info:
    description: 'JSON object with version information for all checked containers'
    value: ${{ steps.check-versions.outputs.version_info }}

runs:
  using: 'composite'
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        # Install jq if not available
        if ! command -v jq &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq
        fi

    - name: Check upstream versions
      id: check-versions
      shell: bash
      run: |
        set -e
        
        # Make the main make script executable
        chmod +x make
        
        echo "🔍 Using make script to check for upstream updates..."
        
        # Use make script to get version information
        if [ -n "${{ inputs.container }}" ]; then
          echo "🎯 Checking specific container: ${{ inputs.container }}"
          version_info=$(./make check-updates "${{ inputs.container }}")
        else
          echo "🔍 Checking all containers..."
          version_info=$(./make check-updates)
        fi
        
        # Simple registry check function (only if needed)
        check_image_exists() {
          local registry=$1
          local image_name=$2 
          local tag=$3
          timeout 30 docker manifest inspect "${registry}/${image_name}:${tag}" >/dev/null 2>&1
        }
        
        # Process results - filter containers that actually need builds
        containers_with_updates=()
        
        while IFS= read -r container_data; do
          container=$(echo "$container_data" | jq -r '.container')
          current_version=$(echo "$container_data" | jq -r '.current_version')
          latest_version=$(echo "$container_data" | jq -r '.latest_version')
          update_available=$(echo "$container_data" | jq -r '.update_available')
          status=$(echo "$container_data" | jq -r '.status')
          
          echo "📋 $container: $current_version → $latest_version (update: $update_available)"
          
          # Only proceed if update is available
          if [ "$update_available" = "true" ]; then
            should_build="true"
            
            # Skip registry check if requested, or for new containers
            if [ "${{ inputs.skip_registry_check }}" != "true" ] && [ "$status" != "new-container" ]; then
              # Quick check if already published (optional optimization)
              if check_image_exists "ghcr.io" "$container" "$latest_version" || \
                 ([ -n "${{ inputs.dockerhub_username }}" ] && check_image_exists "docker.io/${{ inputs.dockerhub_username }}" "$container" "$latest_version"); then
                echo "   ✅ Version $latest_version already published - skipping"
                should_build="false"
              fi
            fi
            
            if [ "$should_build" = "true" ]; then
              if [ "$status" = "new-container" ]; then
                echo "   🆕 New container ready for initial release"
              else
                echo "   🚀 Update needed: $latest_version"
              fi
              containers_with_updates+=("$container")
            fi
          else
            echo "   ✅ Up to date"
          fi
          
        done < <(echo "$version_info" | jq -c '.[]')
        
        # Create outputs
        if [ ${#containers_with_updates[@]} -eq 0 ]; then
          echo "containers_with_updates=[]" >> $GITHUB_OUTPUT
          echo "update_count=0" >> $GITHUB_OUTPUT
          echo "📋 No containers need builds"
        else
          container_json=$(printf '%s\n' "${containers_with_updates[@]}" | jq -R . | jq -s -c .)
          echo "containers_with_updates=$container_json" >> $GITHUB_OUTPUT
          echo "update_count=${#containers_with_updates[@]}" >> $GITHUB_OUTPUT
          echo "📋 Containers needing builds: ${containers_with_updates[*]}"
        fi
        
        # Output complete version info
        {
          echo "version_info<<EOF"
          echo "$version_info"
          echo "EOF"
        } >> $GITHUB_OUTPUT
