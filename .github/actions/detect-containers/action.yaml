name: 'Detect Containers to Build'
description: 'Detects which containers need building based on changes (GitHub handles path filtering)'

inputs:
  container:
    description: 'Specific container to build (overrides detection)'
    required: false
    default: ''
  force_rebuild:
    description: 'Force rebuild even if image exists'
    required: false
    default: 'false'

outputs:
  containers:
    description: 'JSON array of containers that need building'
    value: ${{ steps.find-containers.outputs.containers }}
  count:
    description: 'Number of containers to build'
    value: ${{ steps.find-containers.outputs.count }}

runs:
  using: 'composite'
  steps:
    - name: Find containers to build
      id: find-containers
      shell: bash
      run: |
        set -e
        containers_to_build=()

        # If specific container requested
        if [ -n "${{ inputs.container }}" ]; then
          echo "🎯 Building specific container: ${{ inputs.container }}"
          containers_to_build=("${{ inputs.container }}")
        else
          echo "🔍 Detecting containers that need building..."
          
          # Since GitHub already filtered by paths, any container with a version.sh
          # in the changed files should be built. This is much simpler than manual git parsing.
          while IFS= read -r -d '' version_script_path; do
            container=$(dirname "$version_script_path" | sed 's|^\./||')

            # Skip if already processed
            if [[ " ${containers_to_build[*]} " =~ " ${container} " ]]; then
              continue
            fi

            # Skip helper directories and non-container directories
            if [[ "$container" == "helpers" || "$container" == "docs" || "$container" == "backup-"* || "$container" == ".github" ]]; then
              continue
            fi

            echo "📦 Found container: $container"
            containers_to_build+=("$container")
          done < <(find . -name "version.sh" -not -path "./.git/*" -print0)
        fi

        # Create JSON array output
        if [ ${#containers_to_build[@]} -eq 0 ]; then
          echo "containers=[]" >> $GITHUB_OUTPUT
          echo "count=0" >> $GITHUB_OUTPUT
          echo "📋 No containers need building"
        else
          container_json=$(printf '%s\n' "${containers_to_build[@]}" | jq -R . | jq -s -c .)
          {
            echo "containers<<EOF"
            echo "$container_json"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          echo "count=${#containers_to_build[@]}" >> $GITHUB_OUTPUT
          echo "📋 Found containers to build: ${containers_to_build[*]}"
        fi
