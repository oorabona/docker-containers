name: 'Detect Containers to Build'
description: 'Detects which containers need building based on changes (GitHub handles path filtering)'

inputs:
  container:
    description: 'Specific container to build (overrides detection)'
    required: false
    default: ''
  force_rebuild:
    description: 'Force rebuild even if image exists'
    required: false
    default: 'false'

outputs:
  containers_list:
    description: 'Comma-separated list of containers that need building'  
    value: ${{ steps.find-containers.outputs.containers_list }}
  containers:
    description: 'JSON array of containers that need building (converted from CSV for matrix compatibility)'
    value: ${{ steps.find-containers.outputs.containers }}
  count:
    description: 'Number of containers to build'
    value: ${{ steps.find-containers.outputs.count }}

runs:
  using: 'composite'
  steps:
    - name: Find containers to build
      id: find-containers
      shell: bash
      run: |
        set -e
        containers_to_build=()

        # Get list of valid containers from make script (source of truth)
        echo "🔍 Getting list of valid containers from make script..."
        valid_containers=$(cd "$GITHUB_WORKSPACE" && ./make list 2>/dev/null || echo "")
        
        if [[ -z "$valid_containers" ]]; then
          echo "⚠️  No valid containers found in make script"
          exit 1
        fi
        
        echo "📋 Valid containers from make: $(echo "$valid_containers" | tr '\n' ' ')"

        # If specific container requested, validate it
        if [ -n "${{ inputs.container }}" ]; then
          echo "🎯 Validating specific container: ${{ inputs.container }}"
          if echo "$valid_containers" | grep -qx "${{ inputs.container }}"; then
            containers_to_build=("${{ inputs.container }}")
            echo "✅ Container validated"
          else
            echo "❌ Container '${{ inputs.container }}' not found in make list"
            exit 1
          fi
        else
          echo "🔍 Detecting containers that need building based on changed files..."
          
          # Determine what files changed in this push/PR
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # For push events, compare with previous commit
            changed_files=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, compare with base branch
            changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD 2>/dev/null || echo "")
          else
            # For manual triggers or other events, no auto-detection
            changed_files=""
          fi

          if [[ -n "$changed_files" ]]; then
            echo "📝 Changed files:"
            echo "$changed_files"
            
            # Extract container names from changed file paths
            while IFS= read -r file; do
              # Check if file is in a container directory (e.g., ansible/Dockerfile, debian/version.sh)
              if [[ "$file" =~ ^([^/]+)/ ]]; then
                container="${BASH_REMATCH[1]}"
                
                # Skip if already processed
                if [[ " ${containers_to_build[*]} " =~ " ${container} " ]]; then
                  continue
                fi
                
                # Verify container is in make's valid list (source of truth)
                if echo "$valid_containers" | grep -qx "$container"; then
                  echo "📦 Container needs building: $container (changed files detected, validated by make)"
                  containers_to_build+=("$container")
                fi
              fi
            done <<< "$changed_files"
          else
            echo "ℹ️  No git diff available or manual trigger without specific container"
            echo "ℹ️  Skipping auto-detection (use container input for manual builds)"
          fi
        fi

        # Create outputs (CSV first, then JSON for matrix compatibility)
        if [ ${#containers_to_build[@]} -eq 0 ]; then
          echo "containers_list=" >> $GITHUB_OUTPUT
          echo "containers=[]" >> $GITHUB_OUTPUT
          echo "count=0" >> $GITHUB_OUTPUT
          echo "📋 No containers need building"
        else
          containers_csv=$(IFS=','; echo "${containers_to_build[*]}")
          container_json=$(printf '%s\n' "${containers_to_build[@]}" | jq -R . | jq -s -c .)
          echo "containers_list=$containers_csv" >> $GITHUB_OUTPUT
          echo "containers=$container_json" >> $GITHUB_OUTPUT
          echo "count=${#containers_to_build[@]}" >> $GITHUB_OUTPUT
          echo "📋 Found containers to build: ${containers_to_build[*]}"
        fi
