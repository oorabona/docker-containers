name: 'Detect Containers to Build'
description: 'Intelligently detects which containers need building based on changes and registry status'

inputs:
  container:
    description: 'Specific container to build (overrides detection)'
    required: false
    default: ''
  github_token:
    description: 'GitHub token for API access'
    required: true
  event_name:
    description: 'GitHub event name'
    required: true
  event_before:
    description: 'GitHub event before SHA'
    required: false
    default: ''
  sha:
    description: 'Current commit SHA'
    required: true
  force_rebuild:
    description: 'Force rebuild even if image exists'
    required: false
    default: 'false'

outputs:
  containers:
    description: 'JSON array of containers that need building'
    value: ${{ steps.find-containers.outputs.containers }}
  count:
    description: 'Number of containers to build'
    value: ${{ steps.find-containers.outputs.count }}

runs:
  using: 'composite'
  steps:
    - name: Find containers to build
      id: find-containers
      shell: bash
      run: |
        set -e
        containers_to_build=()

        # If specific container requested via workflow_dispatch
        if [ -n "${{ inputs.container }}" ]; then
          echo "üéØ Building specific container: ${{ inputs.container }}"
          containers_to_build=("${{ inputs.container }}")
        else
          echo "üîç Detecting containers that need building..."

          # Use find with null-delimited output for robustness
          while IFS= read -r -d '' dockerfile_path; do
            container=$(dirname "$dockerfile_path" | sed 's|^\./||')

            # Skip if already processed (in case of multiple Dockerfiles in same dir)
            if [[ " ${containers_to_build[*]} " =~ " ${container} " ]]; then
              continue
            fi

            # Initialize needs_build to false; will be updated based on logic below
            needs_build=false

            # If force_rebuild is true, override all other logic
            if [ "${{ inputs.force_rebuild }}" = "true" ]; then
              needs_build=true
            fi
            echo "üì¶ Checking $container (found Dockerfile at $dockerfile_path)..."

            # For push/PR events, check if this specific container was modified
            if [ "${{ inputs.event_name }}" = "push" ] || [ "${{ inputs.event_name }}" = "pull_request" ]; then
              # Precompute the list of all modified files once
              if [ -z "${MODIFIED_FILES}" ]; then
                if [ -n "${{ inputs.event_before }}" ] && \
                   [ "${{ inputs.event_before }}" != "0000000000000000000000000000000000000000" ]; then
                  MODIFIED_FILES=$(git diff --name-only ${{ inputs.event_before }}..${{ inputs.sha }} 2>/dev/null)
                else
                  # Fallback for first commit or when before is not available
                  MODIFIED_FILES=$(git log --name-only --pretty=format: -1 ${{ inputs.sha }})
                fi
              fi

              # Check if any files in this container directory were modified
              if echo "$MODIFIED_FILES" | grep -q "^$container/"; then
                needs_build=true
                echo "   ‚úÖ Container files modified, will build"
              else
                echo "   ‚è≠Ô∏è No changes to this container, skipping"
              fi
            else
              # For scheduled runs or manual dispatch, check version and registry existence
              # Also check for upstream version changes
              echo "   üîç Checking upstream version changes..."
              
              # Get current and upstream versions
              if [[ -f "$container/version.sh" ]]; then
                cd "$container"
                current_version=$(bash version.sh 2>/dev/null || echo "")
                upstream_version=$(bash version.sh latest 2>/dev/null || echo "")
                cd ..
                
                if [[ -n "$current_version" && -n "$upstream_version" ]]; then
                  if [[ "$current_version" != "$upstream_version" ]]; then
                    needs_build=true
                    echo "   ‚úÖ Upstream version change detected: $current_version ‚Üí $upstream_version"
                  else
                    echo "   ‚è≠Ô∏è No upstream version changes detected ($current_version)"
                  fi
                else
                  echo "   ‚ö†Ô∏è Could not determine versions - will skip"
                fi
              else
                echo "   ‚ö†Ô∏è No version.sh found - will skip"
              fi
            fi

            if [ "$needs_build" = "true" ]; then
              containers_to_build+=("$container")
            fi
          done < <(find . -name "Dockerfile" -not -path "./.git/*" -print0)
        fi

        # Create JSON array output
        if [ ${#containers_to_build[@]} -eq 0 ]; then
          echo "containers=[]" >> $GITHUB_OUTPUT
          echo "count=0" >> $GITHUB_OUTPUT
          echo "üìã No containers need building"
        else
          container_json=$(printf '%s\n' "${containers_to_build[@]}" | jq -R . | jq -s -c .)
          echo "containers=$container_json" >> $GITHUB_OUTPUT
          echo "count=${#containers_to_build[@]}" >> $GITHUB_OUTPUT
          echo "üìã Found containers to build: ${containers_to_build[*]}"
        fi
