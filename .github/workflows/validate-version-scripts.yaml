name: Validate Version Scripts

on:
  pull_request:
    paths:
      - '**/version.sh'
      - 'validate-version-scripts.sh'
      - '.github/workflows/validate-version-scripts.yaml'
      - '.github/workflows/upstream-monitor.yaml'
      - '.github/actions/check-upstream-versions/**'
  workflow_dispatch:
    inputs:
      container:
        description: 'Container to validate (optional, validates all if empty)'
        required: false
        type: string
      verbose:
        description: 'Enable verbose output'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
jobs:
  validate-version-scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Verify dependencies
        run: |
          # Verify that required dependencies are available
          # curl and git are pre-installed on ubuntu-latest runners, but let's confirm
          echo "✅ Verifying dependencies..."
          echo "- jq: $(jq --version)"
          echo "- curl: $(curl --version | head -1)"
          echo "- git: $(git --version)"

          # Verify all dependencies are available
          command -v jq >/dev/null 2>&1 || { echo "❌ jq not found" && exit 1; }
          command -v curl >/dev/null 2>&1 || { echo "❌ curl not found" && exit 1; }
          command -v git >/dev/null 2>&1 || { echo "❌ git not found" && exit 1; }
          echo "✅ All dependencies verified and ready"
      - name: Make scripts executable
        run: |
          chmod +x validate-version-scripts.sh
          chmod +x make
          find . -name "version.sh" -exec chmod +x {} \;

      - name: Validate version scripts
        run: |
          if [[ -n "${{ github.event.inputs.container }}" ]]; then
            echo "Validating specific container: ${{ github.event.inputs.container }}"
            ./validate-version-scripts.sh "${{ github.event.inputs.container }}"
          else
            echo "Validating all version scripts"
            ./validate-version-scripts.sh
          fi
        env:
          VERBOSE: ${{ github.event.inputs.verbose == 'true' && '1' || '0' }}

      - name: Detect containers for testing
        id: detect-containers
        uses: ./.github/actions/detect-containers
        with:
          force_rebuild: "true"  # Get all containers for comprehensive testing

      - name: Test upstream monitoring action
        if: steps.detect-containers.outputs.count > 0
        id: test-upstream
        run: |
          containers_list="${{ steps.detect-containers.outputs.containers_list }}"
          first_container="${containers_list%%,*}"  # Get everything before first ,
          
          # Verify the selected container actually exists and has required files
          if [[ -d "$first_container" && -f "$first_container/Dockerfile" && -f "$first_container/version.sh" ]]; then
            echo "✅ Selected container for upstream test: $first_container"
            echo "first_container=$first_container" >> $GITHUB_OUTPUT
            echo "test_single=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️  First container ($first_container) is not valid, skipping single container test"
            echo "test_single=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Run upstream monitoring test (single container)
        if: steps.detect-containers.outputs.count > 0 && steps.test-upstream.outputs.test_single == 'true'
        uses: ./.github/actions/check-upstream-versions
        with:
          container: ${{ steps.test-upstream.outputs.first_container }}

      - name: Test upstream monitoring action (all containers)
        if: github.event.inputs.container == '' && steps.detect-containers.outputs.count > 1
        uses: ./.github/actions/check-upstream-versions

      - name: Display test results
        run: |
          echo "## 🧪 Version Script Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All version.sh scripts have been tested and validated." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation completed:** ✅ All version scripts working correctly" >> $GITHUB_STEP_SUMMARY
          
          # Show which containers were used for upstream monitoring tests
          container_count="${{ steps.detect-containers.outputs.count }}"
          if [ "$container_count" -gt 0 ]; then
            if [[ "${{ steps.test-upstream.outputs.test_single }}" == "true" ]]; then
              first_container="${{ steps.test-upstream.outputs.first_container }}"
              echo "- **Upstream monitoring test target:** \`$first_container\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Upstream monitoring test:** Single container test skipped (no valid container found)" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "$container_count" -gt 1 ]; then
              echo "- **Additional tests:** All-container upstream check" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Upstream monitoring test:** Skipped (no containers detected)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### ✅ What was tested:" >> $GITHUB_STEP_SUMMARY
          echo "- Each version.sh script can retrieve latest upstream versions" >> $GITHUB_STEP_SUMMARY
          echo "- Each version.sh script can validate specific versions" >> $GITHUB_STEP_SUMMARY
          echo "- The upstream monitoring action works with dynamically detected containers" >> $GITHUB_STEP_SUMMARY
          echo "- Integration with the existing make script infrastructure" >> $GITHUB_STEP_SUMMARY
