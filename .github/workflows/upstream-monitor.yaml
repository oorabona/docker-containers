name: Upstream Version Monitor

on:
  schedule:
    - cron: '0 6,18 * * *'  # 6 AM and 6 PM UTC
  workflow_dispatch:
    inputs:
      container:
        description: 'Specific container to check (optional)'
        required: false
        type: string
      debug:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  actions: write  # For triggering auto-build workflow
  packages: write  # Required for auto-build workflow to push container images
  pages: write    # Required for auto-build workflow to update dashboard
  id-token: write # Required for auto-build workflow OIDC authentication

jobs:
  check-upstream-versions:
    runs-on: ubuntu-latest
    outputs:
      containers_with_updates: ${{ steps.check.outputs.containers_with_updates }}
      update_count: ${{ steps.check.outputs.update_count }}
      version_info: ${{ steps.check.outputs.version_info }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check upstream versions
        id: check
        uses: ./.github/actions/check-upstream-versions
        with:
          container: ${{ github.event.inputs.container }}
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          skip_registry_check: ${{ github.event.inputs.debug == 'true' && 'true' || 'false' }}

      - name: Summary
        run: |
          update_count="${{ steps.check.outputs.update_count }}"
          echo "Found $update_count containers with updates"
          if [ "$update_count" -gt 0 ]; then
            echo "Containers to update: ${{ steps.check.outputs.containers_with_updates }}"
          fi

  create-update-prs:
    needs: check-upstream-versions
    if: needs.check-upstream-versions.outputs.update_count > 0
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.check-upstream-versions.outputs.containers_with_updates) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Classify version change
        id: classify
        run: |
          # Extract version info for this specific container from the JSON array
          version_data=$(echo '${{ needs.check-upstream-versions.outputs.version_info }}' | jq -r '.[] | select(.container == "${{ matrix.container }}")')
          current_version=$(echo "$version_data" | jq -r '.current_version')
          new_version=$(echo "$version_data" | jq -r '.latest_version')

          chmod +x .github/scripts/classify-version-change.sh
          change_type=$(.github/scripts/classify-version-change.sh "$current_version" "$new_version")

          echo "change_type=$change_type" >> $GITHUB_OUTPUT
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

          echo "Container: ${{ matrix.container }}"
          echo "Change: $current_version -> $new_version ($change_type)"

      - name: Close duplicate PRs
        id: close_duplicates
        uses: ./.github/actions/close-duplicate-prs
        with:
          container: ${{ matrix.container }}
          new_version: ${{ steps.classify.outputs.new_version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create rebuild marker
        run: |
          mkdir -p ${{ matrix.container }}
          echo "# Rebuild: ${{ matrix.container }} ${{ steps.classify.outputs.current_version }} -> ${{ steps.classify.outputs.new_version }}" > ${{ matrix.container }}/LAST_REBUILD.md
          echo "Date: $(date -u)" >> ${{ matrix.container }}/LAST_REBUILD.md
          echo "Type: ${{ steps.classify.outputs.change_type }}" >> ${{ matrix.container }}/LAST_REBUILD.md

          # Update CHANGELOG with proper section management
          chmod +x .github/scripts/update-changelog.sh
          .github/scripts/update-changelog.sh "${{ matrix.container }}" "${{ steps.classify.outputs.current_version }}" "${{ steps.classify.outputs.new_version }}" "${{ steps.classify.outputs.change_type }}"

      - name: Create Pull Request
        if: steps.close_duplicates.outputs.existing_pr_found != 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "build(${{ matrix.container }}): update to ${{ steps.classify.outputs.new_version }}"
          title: "${{ steps.classify.outputs.change_type == 'major' && '🔄 Major' || '🚀 Minor' }}: ${{ matrix.container }} to ${{ steps.classify.outputs.new_version }}"
          body: |
            ## Container Update: ${{ matrix.container }}

            **Version Change:** `${{ steps.classify.outputs.current_version }}` → `${{ steps.classify.outputs.new_version }}`
            **Change Type:** `${{ steps.classify.outputs.change_type }}`

            ${{ steps.classify.outputs.change_type == 'major' && '⚠️ **Major version change** - Please review carefully before merging.' || '✅ **Minor/patch update** - Should be safe to merge.' }}

            When merged, this will trigger the auto-build workflow to build and push the updated container.

            ---
            *Auto-generated by Upstream Version Monitor*
          branch: update/${{ matrix.container }}-${{ steps.classify.outputs.new_version }}
          delete-branch: true

      - name: Auto-merge minor updates
        if: steps.classify.outputs.change_type == 'minor' && steps.create_pr.outputs.pull-request-number
        run: |
          echo "Auto-merging minor update PR #${{ steps.create_pr.outputs.pull-request-number }}"
          gh pr merge ${{ steps.create_pr.outputs.pull-request-number }} --merge --auto
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trigger-auto-build:
    needs: [check-upstream-versions, create-update-prs]
    if: needs.check-upstream-versions.outputs.update_count > 0
    strategy:
      matrix:
        container: ${{ fromJson(needs.check-upstream-versions.outputs.containers_with_updates) }}
    uses: ./.github/workflows/auto-build.yaml
    with:
      container: ${{ matrix.container }}
      force_rebuild: true
    secrets: inherit
