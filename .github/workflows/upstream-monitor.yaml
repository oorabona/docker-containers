name: Upstream Version Monitor

on:
  schedule:
    - cron: '0 6,18 * * *'  # 6 AM and 6 PM UTC
  workflow_dispatch:
    inputs:
      container:
        description: 'Specific container to check (optional)'
        required: false
        type: string
      debug:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  actions: write  # For triggering auto-build workflow
  packages: write  # Required for auto-build workflow to push container images
  pages: write    # Required for auto-build workflow to update dashboard
  id-token: write # Required for auto-build workflow OIDC authentication

jobs:
  check-upstream-versions:
    runs-on: ubuntu-latest
    outputs:
      containers_with_updates: ${{ steps.check.outputs.containers_with_updates }}
      update_count: ${{ steps.check.outputs.update_count }}
      version_info: ${{ steps.check.outputs.version_info }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check upstream versions
        id: check
        uses: ./.github/actions/check-upstream-versions
        with:
          container: ${{ github.event.inputs.container }}

      - name: Summary
        run: |
          update_count="${{ steps.check.outputs.update_count }}"
          echo "Found $update_count containers with updates"
          if [ "$update_count" -gt 0 ]; then
            echo "Containers to update: ${{ steps.check.outputs.containers_with_updates }}"
          fi

  create-update-prs:
    needs: check-upstream-versions
    if: needs.check-upstream-versions.outputs.update_count > 0
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.check-upstream-versions.outputs.containers_with_updates) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git for HTTPS
        run: |
          # Ensure git remote uses HTTPS for token authentication
          git remote set-url origin https://github.com/${{ github.repository }}.git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Detect test environment
        id: env_check
        run: |
          if [ "$ACT" = "true" ]; then
            echo "is_local_test=true" >> $GITHUB_OUTPUT
            echo "üß™ Running in local test mode - will skip actual PR creation"
          else
            echo "is_local_test=false" >> $GITHUB_OUTPUT
            echo "üöÄ Running in production mode"
          fi

      - name: Classify version change
        id: classify
        run: |
          # Extract version info for this specific container from the JSON array
          version_data=$(echo '${{ needs.check-upstream-versions.outputs.version_info }}' | jq -r '.[] | select(.container == "${{ matrix.container }}")')
          current_version=$(echo "$version_data" | jq -r '.current_version')
          new_version=$(echo "$version_data" | jq -r '.latest_version')

          chmod +x .github/scripts/classify-version-change.sh
          
          # Run classification and capture outputs (format: change_type=X, reason=Y)
          classification_output=$(.github/scripts/classify-version-change.sh "$current_version" "$new_version")
          
          # Parse outputs using a loop for maintainability
          change_type=""
          reason=""
          while IFS='=' read -r key value; do
            case "$key" in
              change_type) change_type="$value" ;;
              reason) reason="$value" ;;
              *) ;; # ignore other keys for now
            esac
          done <<< "$classification_output"

          echo "change_type=$change_type" >> $GITHUB_OUTPUT
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "reason=$reason" >> $GITHUB_OUTPUT

          echo "Container: ${{ matrix.container }}"
          echo "Change: $current_version -> $new_version ($change_type)"
          echo "Reason: $reason"

      - name: Close duplicate PRs
        id: close_duplicates
        uses: ./.github/actions/close-duplicate-prs
        with:
          container: ${{ matrix.container }}
          new_version: ${{ steps.classify.outputs.new_version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create rebuild marker
        run: |
          mkdir -p ${{ matrix.container }}
          
          # Generate workflow run URL
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Determine next steps based on change type
          if [[ "${{ steps.classify.outputs.change_type }}" == "major" ]]; then
            NEXT_STEPS="- ‚ö†Ô∏è **Manual review required** for major version changes
          - Review CHANGELOG and breaking changes
          - Test locally if needed"
          else
            NEXT_STEPS="- ‚úÖ **Auto-merge enabled** - will merge automatically once CI passes
          - Build will trigger automatically on merge"
          fi
          
          cat > ${{ matrix.container }}/LAST_REBUILD.md << EOF
          # Container Rebuild Information
          
          | Field | Value |
          |-------|-------|
          | **Container** | \`${{ matrix.container }}\` |
          | **Version Change** | \`${{ steps.classify.outputs.current_version }}\` ‚Üí \`${{ steps.classify.outputs.new_version }}\` |
          | **Change Type** | \`${{ steps.classify.outputs.change_type }}\` |
          | **Rebuild Date** | $(date -u +"%Y-%m-%dT%H:%M:%SZ") |
          | **Triggered By** | Upstream Monitor (automated) |
          | **Reason** | ${{ steps.classify.outputs.reason }} |
          | **Detection Run** | [View Workflow]($WORKFLOW_URL) |
          
          ## Build Status
          
          This file triggers the auto-build workflow when merged to master.
          Build status will be available in GitHub Actions after merge.
          
          ## Next Steps
          
          $NEXT_STEPS
          
          ---
          *Auto-generated by docker-containers automation system*
          EOF

      - name: Import GPG key
        if: steps.close_duplicates.outputs.existing_pr_found != 'true' && steps.env_check.outputs.is_local_test != 'true'
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_config_global: true
          git_committer_name: github-actions[bot]
          git_committer_email: 41898282+github-actions[bot]@users.noreply.github.com

      - name: Create Pull Request
        if: steps.close_duplicates.outputs.existing_pr_found != 'true' && steps.env_check.outputs.is_local_test != 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "build(${{ matrix.container }}): update to ${{ steps.classify.outputs.new_version }}"
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          title: "${{ steps.classify.outputs.change_type == 'major' && 'üîÑ Major' || 'üöÄ Minor' }}: ${{ matrix.container }} to ${{ steps.classify.outputs.new_version }}"
          body: |
            ## Container Update: ${{ matrix.container }}

            **Version Change:** `${{ steps.classify.outputs.current_version }}` ‚Üí `${{ steps.classify.outputs.new_version }}`
            **Change Type:** `${{ steps.classify.outputs.change_type }}`

            ${{ steps.classify.outputs.change_type == 'major' && '‚ö†Ô∏è **Major version change** - Please review carefully before merging.' || '‚úÖ **Minor/patch update** - Should be safe to merge.' }}

            When merged, this will trigger the auto-build workflow to build and push the updated container.

            ---
            *Auto-generated by Upstream Version Monitor*
          branch: update/${{ matrix.container }}-${{ steps.classify.outputs.new_version }}
          delete-branch: true
          labels: |
            automation
            ${{ matrix.container }}
            ${{ steps.classify.outputs.change_type }}-update
          assignees: ${{ steps.classify.outputs.change_type == 'major' && github.repository_owner || '' }}

      - name: Auto-merge minor updates
        if: steps.classify.outputs.change_type == 'minor' && steps.create_pr.outputs.pull-request-number
        run: |
          echo "Auto-merging minor update PR #${{ steps.create_pr.outputs.pull-request-number }}"
          gh pr merge ${{ steps.create_pr.outputs.pull-request-number }} --merge --auto
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show PR details (test mode)
        if: steps.env_check.outputs.is_local_test == 'true'
        run: |
          echo "üß™ LOCAL TEST MODE - Would create PR with:"
          echo "   Title: ${{ steps.classify.outputs.change_type == 'major' && 'üîÑ Major' || 'üöÄ Minor' }}: ${{ matrix.container }} to ${{ steps.classify.outputs.new_version }}"
          echo "   Branch: update/${{ matrix.container }}-${{ steps.classify.outputs.new_version }}"
          echo "   Change: ${{ steps.classify.outputs.current_version }} ‚Üí ${{ steps.classify.outputs.new_version }} (${{ steps.classify.outputs.change_type }})"
          echo "   Labels: automation, ${{ matrix.container }}, ${{ steps.classify.outputs.change_type }}-update"
          echo "   Assignees: ${{ steps.classify.outputs.change_type == 'major' && github.repository_owner || '(none - minor update)' }}"
          echo "   Auto-merge: ${{ steps.classify.outputs.change_type == 'minor' && 'Yes (minor update)' || 'No (major update - requires manual review)' }}"
