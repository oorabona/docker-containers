name: Build and Deploy

on:
  schedule:
    - cron: "0 10 * * *"
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"

jobs:
  generate-job-strategy-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.rebuild-images.outputs.matrix }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Run changed-files with dir_names
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v34
        with:
          dir_names: "true"
          files_ignore: |
            helpers/**
          json: "true"
      - 
        name: List all changed files
        run: |
          for file in ${{ steps.changed-files-dir-names.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
      -
        name: List all changed directories
        run: |
          for dir in ${{ steps.changed-files-dir-names.outputs.all_changed_dirs }}; do
            echo "$dir was changed"
          done
      -
        name: Do we need to rebuild all images?
        id: rebuild-images
        run: |
          if [[ "${{ steps.changed-files-dir-names.outputs.all_changed_files }}" == *".github/workflows"* || "${{ github.event_name == 'schedule' }}" == "true" ]]; then
            echo "All images need to be rebuilt"
            echo "matrix=[\"sslh\", \"terraform\", \"ansible\", \"openvpn\"]" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.changed-files-dir-names.outputs.all_changed_files }}" == "." ]]; then
            echo "No images need to be rebuilt"
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            echo "Only changed images need to be rebuilt"
            echo "matrix=${{ steps.changed-files-dir-names.outputs.all_changed_files }}" >> $GITHUB_OUTPUT
          fi

  docker:
    needs: generate-job-strategy-matrix
    if: ${{ needs.generate-job-strategy-matrix.outputs.matrix != '' && toJson(fromJson(needs.generate-job-strategy-matrix.outputs.matrix)) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: ${{ fromJson(needs.generate-job-strategy-matrix.outputs.matrix) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Get number of vCPU
        id: get_vcpu
        run: |
          vcpu=$(nproc)
          echo "vcpu=${vcpu}" >> $GITHUB_OUTPUT
      -
        name: Get ${{ matrix.job }} version
        id: get_version
        working-directory: ${{ matrix.job }}
        run: |
          version=$(bash version.sh latest)
          echo "version=${version}" >> $GITHUB_OUTPUT
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            oorabona/${{ matrix.job }}
            ghcr.io/oorabona/${{ matrix.job }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # set version from upstream repo version
            type=raw,value=${{ steps.get_version.outputs.version }}
      # Since we are using only one tag for cache (buildcache), we need to check if the version we are going
      # to build will take advantage of the cache or not. If we build the same version, we can use it, otherwise
      # we ask to not use the cache.
      # Or maybe we can just use the cache from GitHub?
      # cache-from: type=gha
      # cache-to: type=gha,mode=max
      -
        name: Should we use the cache for this build?
        id: use-cache
        run: |
          # Get the latest version of our image from Docker Hub
          latest_version=$(bash helpers/check-docker-tag oorabona/${{ matrix.job }} ${{ steps.get_version.outputs.version }})
          if [[ "$latest_version" == "${{ steps.get_version.outputs.version }}" ]]; then
            echo "Version already exists on Docker Hub, we can use the cache"
            echo "use-cache=type=registry,ref=oorabona/${{ matrix.job }}:buildcache" >> $GITHUB_OUTPUT
          else
            echo "Version does not exist on Docker Hub, we cannot use the cache"
            echo "use-cache=false" >> $GITHUB_OUTPUT
          fi
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.job }}
          build-args: |
            VERSION=${{ steps.get_version.outputs.version }}
            NPROC=${{ steps.get_vcpu.outputs.vcpu }}
          platforms: ${{ steps.buildx.outputs.platforms }}
          cache-from: ${{ steps.use-cache.outputs.use-cache }}
          cache-to: type=registry,ref=oorabona/${{ matrix.job }}:buildcache,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Get short description from README.md
        id: get_short_description
        working-directory: ${{ matrix.job }}
        run: |
          short_description=$(grep -m 1 -oP '(?<=^# ).*' README.md)
          echo "short_description=${short_description}" >> $GITHUB_OUTPUT
      -
        name: Update repo description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: oorabona/${{ matrix.job }}
          short-description: ${{ steps.get_short_description.outputs.short_description }}
          readme-filepath: ./${{ matrix.job }}/README.md