name: Auto Build & Push

on:
  schedule:
    # Run twice daily to check for updates
    - cron: '0 6,18 * * *'
  workflow_dispatch:
    inputs:
      container:
        description: 'Specific container to build (leave empty for all)'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if no updates'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  DOCKER_HUB_REGISTRY: docker.io

jobs:
  detect-updates:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-updates: ${{ steps.set-matrix.outputs.has-updates }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect container updates
        id: set-matrix
        run: |
          # Use existing infrastructure
          containers_to_build=()
          
          if [ -n "${{ github.event.inputs.container }}" ]; then
            # Specific container requested
            containers_to_build=("${{ github.event.inputs.container }}")
          else
            # Check all containers for updates using existing scripts
            for container_dir in */; do
              container=${container_dir%/}
              
              # Skip if not a container directory
              [ ! -f "$container/Dockerfile" ] && continue
              
              echo "Checking $container for updates..."
              
              # Use existing version.sh if available
              if [ -f "$container/version.sh" ]; then
                cd "$container"
                current_version=$(bash version.sh latest 2>/dev/null || echo "unknown")
                cd ..
                
                # Simple check: if force rebuild or if this is a scheduled run, include it
                if [ "${{ github.event.inputs.force_rebuild }}" = "true" ] || [ "${{ github.event_name }}" = "schedule" ]; then
                  containers_to_build+=("$container")
                  echo "✅ $container will be built (current: $current_version)"
                fi
              else
                echo "⚠️ $container has no version.sh, skipping"
              fi
            done
          fi
          
          # Create matrix
          if [ ${#containers_to_build[@]} -gt 0 ]; then
            matrix_json=$(printf '%s\n' "${containers_to_build[@]}" | jq -R . | jq -s .)
            echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "Found containers to build: ${containers_to_build[*]}"
          else
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "No containers need building"
          fi

  build-and-push:
    needs: detect-updates
    if: needs.detect-updates.outputs.has-updates == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.detect-updates.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_HUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Get version using existing scripts
        id: version
        run: |
          cd "${{ matrix.container }}"
          
          if [ -f "version.sh" ]; then
            version=$(bash version.sh latest 2>/dev/null || echo "latest")
          else
            version="latest"
          fi
          
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Container: ${{ matrix.container }}, Version: $version"

      - name: Build using existing make script
        run: |
          # Use the existing make infrastructure
          if [ -f "make" ]; then
            chmod +x make
            ./make ${{ matrix.container }}
          else
            echo "No make script found, using docker build"
            cd "${{ matrix.container }}"
            docker build -t oorabona/${{ matrix.container }}:latest .
          fi

      - name: Tag and push to registries
        run: |
          container="${{ matrix.container }}"
          version="${{ steps.version.outputs.version }}"
          
          # Tag for GitHub Container Registry
          docker tag "oorabona/$container:latest" "${{ env.REGISTRY }}/${{ github.repository_owner }}/$container:$version"
          docker tag "oorabona/$container:latest" "${{ env.REGISTRY }}/${{ github.repository_owner }}/$container:latest"
          
          # Push to GitHub Container Registry
          docker push "${{ env.REGISTRY }}/${{ github.repository_owner }}/$container:$version"
          docker push "${{ env.REGISTRY }}/${{ github.repository_owner }}/$container:latest"
          
          # Push to Docker Hub if credentials available
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "🐳 Pushing to Docker Hub..."
            docker tag "oorabona/$container:latest" "oorabona/$container:$version"
            docker push "oorabona/$container:$version" || echo "⚠️ Failed to push to Docker Hub"
            docker push "oorabona/$container:latest" || echo "⚠️ Failed to push to Docker Hub"
          else
            echo "⚠️ Docker Hub credentials not available, skipping Docker Hub push"
          fi
          
          echo "✅ Successfully built and pushed $container:$version"

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}:${{ steps.version.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  summary:
    needs: [detect-updates, build-and-push]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "## 🚀 Auto Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-updates.outputs.has-updates }}" = "true" ]; then
            echo "### ✅ Containers Built" >> $GITHUB_STEP_SUMMARY
            matrix='${{ needs.detect-updates.outputs.matrix }}'
            echo "$matrix" | jq -r '.[] | "- " + .' >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.build-and-push.result }}" = "success" ]; then
              echo "✅ All builds completed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Some builds failed - check logs above" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ℹ️ No Updates Found" >> $GITHUB_STEP_SUMMARY
            echo "No containers needed building at this time." >> $GITHUB_STEP_SUMMARY
          fi
