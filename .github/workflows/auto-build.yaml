---
name: Auto Build & Push

'on':
  schedule:
    # Run twice daily to check for updates
    - cron: '0 6,18 * * *'
  push:
    branches: [main, master]
    paths:
      - '*/Dockerfile'
      - '*/version.sh'
      - '**/*.sh'
      - 'make'
  pull_request:
    branches: [main, master]
    paths:
      - '*/Dockerfile'
      - '*/version.sh'
      - '**/*.sh'
      - 'make'
  workflow_dispatch:
    inputs:
      container:
        description: 'Specific container to build (leave empty for all)'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if no updates'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKER: docker.io

jobs:
  detect-containers:
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.find-containers.outputs.containers }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find containers to build
        id: find-containers
        run: |
          set -e
          containers_to_build=()
          
          # If specific container requested via workflow_dispatch
          if [ -n "${{ github.event.inputs.container }}" ]; then
            echo "üéØ Building specific container: ${{ github.event.inputs.container }}"
            containers_to_build=("${{ github.event.inputs.container }}")
          else
          echo "üîç Detecting containers that need building..."

          for dir in */; do
            container=${dir%/}

            # Skip if not a container directory
            [ ! -f "$container/Dockerfile" ] && continue

            needs_build=false

            echo "üì¶ Checking $container..."

            # For push/PR events, check if container was modified
            if [ "${{ github.event_name }}" = "push" ] || \
               [ "${{ github.event_name }}" = "pull_request" ]; then
              # Check if any files in this container directory were modified
              if [ -n "${{ github.event.before }}" ] && \
                 [ "${{ github.event.before }}" != \
                   "0000000000000000000000000000000000000000" ]; then
                modified_files=$(git diff --name-only \
                  ${{ github.event.before }}..${{ github.sha }} \
                  2>/dev/null | grep "^$container/" || true)
              else
                # Fallback for first commit or when before is not available
                modified_files=$(git log --name-only --pretty=format: -1 \
                  ${{ github.sha }} | grep "^$container/" || true)
              fi

              if [ -n "$modified_files" ]; then
                needs_build=true
                echo "   ‚úÖ Container files modified, will build"
              else
                echo "   ‚è≠Ô∏è No changes to this container, skipping"
              fi
            else
              # For scheduled runs or manual dispatch
              needs_build=true
              echo "   ‚úÖ Scheduled run - will check version and registry status"
            fi

            if [ "$needs_build" = "true" ]; then
              containers_to_build+=("$container")
            fi
          done
          fi
          
          # Create JSON array output
          if [ ${#containers_to_build[@]} -eq 0 ]; then
            echo "containers=[]" >> $GITHUB_OUTPUT
            echo "üìã No containers need building"
          else
            container_json=$(printf '%s\n' "${containers_to_build[@]}" | jq -R . | jq -s -c .)
            echo "containers=$container_json" >> $GITHUB_OUTPUT
            echo "üìã Found containers to build: ${containers_to_build[*]}"
          fi

  build-and-push:
    needs: detect-containers
    if: fromJson(needs.detect-containers.outputs.containers).length > 0
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.detect-containers.outputs.containers) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build container
        id: build
        uses: ./.github/actions/build-container
        with:
          container: ${{ matrix.container }}
          force_rebuild: ${{ github.event.inputs.force_rebuild }}
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build summary
        if: always()
        run: |
          container="${{ matrix.container }}"
          needs_build="${{ steps.build.outputs.built }}"
          current_version="${{ steps.build.outputs.version }}"
          image_name="${{ steps.build.outputs.image_name }}"
          
          echo "## üì¶ Build Summary for \`$container\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Container** | \`$container\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`$current_version\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Needed** | \`$needs_build\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$needs_build" = "true" ]; then
            echo "| **GHCR Image** | \`ghcr.io/$image_name:$current_version\` |" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
              echo "| **Docker Hub Image** | \`docker.io/$image_name:$current_version\` |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚úÖ Successfully built and pushed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üéØ Smart Detection Results:**" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "- üìù **Trigger**: Code changes detected in container files" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
              echo "- üîÑ **Trigger**: Force rebuild requested" >> $GITHUB_STEP_SUMMARY
            else
              echo "- üîç **Trigger**: Scheduled check found missing/outdated images" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚è≠Ô∏è Build skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üéØ Smart Detection Results:**" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Images already exist in all target registries" >> $GITHUB_STEP_SUMMARY
            echo "- üìã Version \`$current_version\` is up to date" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

  summary:
    needs: [detect-containers, build-and-push]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate workflow summary
        run: |
          echo "# üöÄ Auto Build & Push - Workflow Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Repository** | \`${{ github.repository }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch/Ref** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          
          containers='${{ needs.detect-containers.outputs.containers }}'
          container_count=$(echo "$containers" | jq length)
          
          if [ "$container_count" -gt 0 ]; then
            echo "| **Containers Processed** | $container_count |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Containers Processed** | 0 |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$container_count" -eq 0 ]; then
            echo "### ‚ÑπÔ∏è No containers needed building" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üéØ Smart Detection Results:**" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "- üìù No container files were modified in this commit" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ‚úÖ All container images are up to date in registries" >> $GITHUB_STEP_SUMMARY
              echo "- üîç No new upstream versions detected" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "### ‚úÖ All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üéØ Smart Detection Features:**" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **Automatic triggering** on container file changes" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **Registry verification** to avoid duplicate builds" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **Multi-platform** builds (amd64 + arm64)" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **Multi-registry** publishing (GHCR + Docker Hub)" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ **Security scanning** with Trivy" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-and-push.result }}" = "skipped" ]; then
            echo "### ‚è≠Ô∏è Builds were skipped" >> $GITHUB_STEP_SUMMARY
            echo "All target images already exist and are up to date." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Some builds failed or were cancelled" >> $GITHUB_STEP_SUMMARY
            echo "Check the individual job logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_ü§ñ Smart CI/CD powered by GitHub Actions_" >> $GITHUB_STEP_SUMMARY
