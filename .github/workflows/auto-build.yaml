name: Auto Build & Push

on:
  schedule:
    # Run twice daily to check for updates
    - cron: '0 6,18 * * *'
  workflow_dispatch:
    inputs:
      container:
        description: 'Specific container to build (leave empty for all)'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if no updates'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  DOCKER_HUB_REGISTRY: docker.io

jobs:
  detect-updates:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-updates: ${{ steps.set-matrix.outputs.has-updates }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Smart container update detection
        id: set-matrix
        run: |
          # Enhanced logic for smart version checking
          containers_to_build=()
          
          if [ -n "${{ github.event.inputs.container }}" ]; then
            # Specific container requested
            containers_to_build=("${{ github.event.inputs.container }}")
            echo "üéØ Building specific container: ${{ github.event.inputs.container }}"
          else
            # Smart update detection using existing scripts
            echo "üîç Checking all containers for upstream updates..."
            
            for container_dir in */; do
              container=${container_dir%/}
              
              # Skip if not a container directory
              [ ! -f "$container/Dockerfile" ] && continue
              
              echo "üì¶ Checking $container..."
              
              # Use existing version.sh if available
              if [ -f "$container/version.sh" ]; then
                cd "$container"
                
                # Get current upstream version
                upstream_version=$(bash version.sh latest 2>/dev/null || echo "unknown")
                
                # Check if we already have this version built
                our_image_exists=false
                if [ "$upstream_version" != "unknown" ]; then
                  # Check GitHub Container Registry first
                  if docker manifest inspect "ghcr.io/${{ github.repository_owner }}/$container:$upstream_version" >/dev/null 2>&1; then
                    our_image_exists=true
                    echo "   ‚úÖ Version $upstream_version already exists in GHCR"
                  fi
                fi
                
                # Determine if we need to build
                needs_build=false
                
                if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
                  needs_build=true
                  echo "   üîÑ Force rebuild requested"
                elif [ "$upstream_version" = "unknown" ]; then
                  needs_build=true
                  echo "   ‚ùì Cannot determine upstream version, building to be safe"
                elif [ "$our_image_exists" = "false" ]; then
                  needs_build=true
                  echo "   üÜï New upstream version $upstream_version detected"
                else
                  # For scheduled runs, check if container has recent changes
                  if [ "${{ github.event_name }}" = "schedule" ]; then
                    last_commit=$(git log -1 --format="%at" -- "$container" 2>/dev/null || echo "0")
                    current_time=$(date +%s)
                    time_diff=$((current_time - last_commit))
                    
                    # If container was modified in last 7 days, rebuild to catch any changes
                    if [ $time_diff -lt 604800 ]; then  # 7 days
                      needs_build=true
                      echo "   üïí Recent changes detected, rebuilding"
                    else
                      echo "   ‚úÖ No recent changes and version $upstream_version already built"
                    fi
                  else
                    echo "   ‚úÖ Version $upstream_version already built and up to date"
                  fi
                fi
                
                if [ "$needs_build" = "true" ]; then
                  containers_to_build+=("$container")
                  echo "   ‚úÖ $container will be built (upstream: $upstream_version)"
                fi
                
                cd ..
              else
                echo "   ‚ö†Ô∏è No version.sh found, skipping"
              fi
            done
          fi
          
          # Create matrix
          if [ ${#containers_to_build[@]} -gt 0 ]; then
            matrix_json=$(printf '%s\n' "${containers_to_build[@]}" | jq -R . | jq -s .)
            echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo ""
            echo "üìã Summary: ${#containers_to_build[@]} containers will be built:"
            printf '   ‚Ä¢ %s\n' "${containers_to_build[@]}"
          else
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "üìã No containers need building at this time"
          fi

  build-and-push:
    needs: detect-updates
    if: needs.detect-updates.outputs.has-updates == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.detect-updates.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_HUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Get version and final build check
        id: version
        run: |
          cd "${{ matrix.container }}"
          
          if [ -f "version.sh" ]; then
            version=$(bash version.sh latest 2>/dev/null || echo "latest")
          else
            version="latest"
          fi
          
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "üì¶ Container: ${{ matrix.container }}, Version: $version"
          
          # Final check before building
          should_build=true
          
          # Check if both registries already have this exact version
          ghcr_exists=false
          dockerhub_exists=false
          
          if docker manifest inspect "ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:$version" >/dev/null 2>&1; then
            ghcr_exists=true
          fi
          
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && docker manifest inspect "oorabona/${{ matrix.container }}:$version" >/dev/null 2>&1; then
            dockerhub_exists=true
          fi
          
          # Only skip if both registries have the image (or we don't use Docker Hub)
          if [ "${{ github.event.inputs.force_rebuild }}" != "true" ]; then
            if [ "$ghcr_exists" = "true" ] && ([ "$dockerhub_exists" = "true" ] || [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]); then
              echo "‚è≠Ô∏è Image $version already exists in all target registries"
              should_build=false
            fi
          fi
          
          echo "should-build=$should_build" >> $GITHUB_OUTPUT

      - name: Build using existing make script
        if: steps.version.outputs.should-build == 'true'
        run: |
          echo "üèóÔ∏è Building ${{ matrix.container }}:${{ steps.version.outputs.version }}"
          
          # Use the existing make infrastructure
          if [ -f "make" ]; then
            chmod +x make
            ./make ${{ matrix.container }}
          else
            echo "‚ùå No make script found, using fallback docker build"
            cd "${{ matrix.container }}"
            docker build -t "oorabona/${{ matrix.container }}:latest" .
          fi

      - name: Tag and push to registries
        if: steps.version.outputs.should-build == 'true'
        run: |
          container="${{ matrix.container }}"
          version="${{ steps.version.outputs.version }}"
          
          echo "üè∑Ô∏è Tagging and pushing $container:$version"
          
          # Tag for GitHub Container Registry
          docker tag "oorabona/$container:latest" "${{ env.REGISTRY }}/${{ github.repository_owner }}/$container:$version"
          docker tag "oorabona/$container:latest" "${{ env.REGISTRY }}/${{ github.repository_owner }}/$container:latest"
          
          # Push to GitHub Container Registry
          echo "üì§ Pushing to GitHub Container Registry..."
          docker push "${{ env.REGISTRY }}/${{ github.repository_owner }}/$container:$version"
          docker push "${{ env.REGISTRY }}/${{ github.repository_owner }}/$container:latest"
          
          # Push to Docker Hub if credentials available
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "üê≥ Pushing to Docker Hub..."
            docker tag "oorabona/$container:latest" "oorabona/$container:$version"
            
            if docker push "oorabona/$container:$version" && docker push "oorabona/$container:latest"; then
              echo "‚úÖ Successfully pushed to Docker Hub"
            else
              echo "‚ö†Ô∏è Failed to push to Docker Hub"
            fi
          else
            echo "‚ÑπÔ∏è Docker Hub credentials not configured, skipping Docker Hub push"
          fi
          
          echo "‚úÖ Successfully built and pushed $container:$version"

      - name: Security scan with Trivy
        if: steps.version.outputs.should-build == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:${{ steps.version.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        if: steps.version.outputs.should-build == 'true' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  summary:
    needs: [detect-updates, build-and-push]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "## üöÄ Smart Auto Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-updates.outputs.has-updates }}" = "true" ]; then
            echo "### üì¶ Containers Processed" >> $GITHUB_STEP_SUMMARY
            matrix='${{ needs.detect-updates.outputs.matrix }}'
            echo "$matrix" | jq -r '.[] | "- **" + . + "**"' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.build-and-push.result }}" = "success" ]; then
              echo "‚úÖ **All builds completed successfully**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### üéØ Smart Detection Features" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Version comparison with upstream sources" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Registry existence checks to avoid duplicate builds" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Recent changes detection for scheduled runs" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Multi-registry publishing (GHCR + Docker Hub)" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Security scanning with Trivy" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è **Some builds failed** - check logs above" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ‚ÑπÔ∏è No Updates Found" >> $GITHUB_STEP_SUMMARY
            echo "No containers needed building at this time." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Smart Detection Results:**" >> $GITHUB_STEP_SUMMARY
            echo "- üîç All container versions checked against upstream" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ All images are up to date in target registries" >> $GITHUB_STEP_SUMMARY
            echo "- üìÖ No recent changes requiring rebuilds" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "_Next check: $(date -d '+12 hours' '+%Y-%m-%d %H:00 UTC')_" >> $GITHUB_STEP_SUMMARY
          fi
